import numpy as np
from scipy.interpolate import interp1d
T_copper = np.array([-1e10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 350, 400, 500, 600, 800, 1000, 1200,  1e10])
lambda_copper_vals = np.array([4220, 4220, 8400, 12500, 16200, 19500, 22200, 23900, 24800, 24900, 24300, 17100, 10800, 4450, 2170, 1250, 829, 647, 557, 508, 482, 429, 413, 406, 401, 396, 393, 386, 379, 366, 352, 339, 339])
lambda_copper_curve = interp1d(T_copper, lambda_copper_vals)


def cp_h2o(T):
    return 0.2344331120e+01 + 0.7980520750e-02 * T + -0.1947815100e-04 * T**2 + 0.2015720940e-07 * T**3 + -0.7376117610e-11 * T**4

def lambda_h2o(T):
    return -0.2277096638e+01 + -0.4674267764e+00 * T + 0.1156734789e+00 * T**2 + -0.2596025563e-02 * T**3

def mu_h2o(T):
    return -0.1614293964e+02 + 0.1003491326e+01 * T + 0.5016044555e-01 * T**2 + 0.2330995224e-02 * T**3

def cp_avg_h2o(T1, T2):
    int_t1 = 0.2344331120e+01 * T1 + 2 * 0.7980520750e-02 * T1**2 + 3 * -0.1947815100e-04 * T1**3 + 4 * 0.2015720940e-07 * T1**4 + 5 * -0.7376117610e-11 * T1**5
    int_t2 = 0.2344331120e+01 * T2 + 2 * 0.7980520750e-02 * T2**2 + 3 * -0.1947815100e-04 * T2**3 + 4 * 0.2015720940e-07 * T2**4 + 5 * -0.7376117610e-11 * T2**5
    return (int_t2 - int_t1) / (T2 - T1)

def lambda_copper(T):
        t = [T]
        lambda_val = lambda_copper_curve(t)
        return lambda_val[0]